# -*- coding: utf-8 -*-
"""AmazonProductEDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1foE37TqQMGpdPzIcW2X5KWjX7BsYiYId

**About Dataset**
üì¶ Amazon Electronics Products Sales Dataset (42K+ Items) ‚Äì 2025

This dataset provides detailed information on 42,000+ Amazon electronics products, including sales, ratings, pricing trends, and sub-category distribution. The dataset comes in two versions:
Cleaned File: Fully preprocessed and ready for analysis, visualization, and machine learning projects

Uncleaned File: Raw scraped data for those who want to practice data cleaning, preprocessing, and feature engineering
With 17 enriched features, this dataset is ideal for data science, machine learning, recommendation systems, and business analytics.

Features Overview
Below are the key columns included in the cleaned dataset (the uncleaned version contains more or less the same fields):

**product_title** ‚Äì Complete name/title of the product

**product_rating** ‚Äì Average customer rating (numeric) out of 5

**total_reviews** ‚Äì Total number of customer reviews

**purchased_last_month** ‚Äì Units purchased in the last month

**discounted_price** ‚Äì Current price after discount

**original_price** ‚Äì Original listed price before discount

**discount_percentage** ‚Äì Percentage discount applied to the product

**is_best_seller** ‚Äì Indicates if the product is tagged as a Best Seller

**is_sponsored** ‚Äì Whether the product is a Sponsored item or Organic

***has_coupon*** ‚Äì Special discounted coupons availability (True/False)

**buy_box_availability** ‚Äì BuyBox button availability on amazon search page like add to cart(nan values represent False)

**delivery_date** ‚Äì Estimated delivery date (converted to datetime format)

**sustainability_tags** ‚Äì Eco-friendly and sustainability-related tags

**product_image_url** ‚Äì Direct image link of the product

**product_page_url** ‚Äì Official Amazon product page URL

**data_collected_at** ‚Äì Date when the data was collected

**product_category** ‚Äì Assigned product category based on the title

**üîç Why is this dataset useful?**

This dataset opens up a wide range of practical use cases for Data Science, Machine Learning, and Business Intelligence, such as:

‚úî Price Analysis & Trends ‚Äì Study pricing behavior, discounts, and seasonal sales

‚úî Customer Behavior Analysis ‚Äì Analyze ratings, reviews, and sales patterns

‚úî Recommendation Systems ‚Äì Build personalized product recommendation engines

‚úî Market Basket Analysis ‚Äì Identify related products frequently bought together

‚úî Predictive Modeling ‚Äì Forecast sales, demand, and discount impact

‚úî NLP Projects ‚Äì Use product titles for text classification and category prediction

‚úî Data Cleaning Practice ‚Äì Use the raw file for real-world preprocessing exercises

Files Included:

amazon_products_sales_data_cleaned.csv‚Äì Fully cleaned, ready-to-use
amazon_products_sales_data_uncleaned.csv ‚Äì Raw, original data for preprocessing practice
Inspiration:

Amazon is one of the largest e-commerce platforms globally, and understanding pricing strategies, customer reviews, and sales patterns can help businesses and analysts gain valuable insights. This dataset provides everything you need to perform EDA, ML modeling, and real-world analytics projects.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


#set visualzation
sns.set(style = "darkgrid")

df =pd.read_csv("/content/amazon_products_sales_data_uncleaned.csv")
df.copy()
df.head()

#print shape of the dataframe
print(df.shape)

print(df.dtypes)

print(df.info)

print(df.describe())

#missing value
print(df.isnull().sum())

#check duplicate values
print(df.duplicated().sum())

#Wrong datatype
print(df.dtypes)

"""## Clean 'number of reviews' column

### Subtask:
Clean the 'number of reviews' column by removing non-numeric characters and converting it to a numerical data type.

**Reasoning**:
Clean the 'number_of_reviews' column by removing non-numeric characters and converting it to a numeric data type.
"""

df['number_of_reviews'] = df['number_of_reviews'].astype(str).str.replace(',', '', regex=False).str.replace('+', '', regex=False)
df['number_of_reviews'] = pd.to_numeric(df['number_of_reviews'], errors='coerce')
print(df.dtypes)

#delect missing rows
df.dropna(inplace=True)
print(df.isnull().sum())

print(f'{df.shape[0]} rows and {df.shape[0]}column')

#categorical variable
categorical = [var for var in df.columns if df[var].dtype == 'O']
print('There are {} categorical variables'.format(len(categorical)))
Numerical = [var for var in df.columns if df[var].dtype != 'O']
print('There are {} numerical variables'.format(len(Numerical)))

"""# Task
Clean the 'number of reviews', 'current/discounted price', and 'listed price' columns in the dataframe `df` by removing non-numeric characters and converting them to a numeric data type. Handle any missing values in these columns.

## Clean 'current/discounted price' and 'listed price' columns

### Subtask:
Clean the 'current/discounted price' and 'listed price' columns by removing non-numeric characters and converting them to a numerical data type.

**Reasoning**:
Clean the 'current/discounted price' and 'listed price' columns by removing non-numeric characters and converting them to a numeric data type.
"""

df['current/discounted_price'] = df['current/discounted_price'].astype(str).str.replace('$', '', regex=False).str.replace(',', '', regex=False)
df['current/discounted_price'] = pd.to_numeric(df['current/discounted_price'], errors='coerce')

df['listed_price'] = df['listed_price'].astype(str).str.replace('$', '', regex=False).str.replace(',', '', regex=False)
df['listed_price'] = pd.to_numeric(df['listed_price'], errors='coerce')

print(df.dtypes)

"""## Verify data types

### Subtask:
Check the data types of the 'number of reviews', 'current/discounted price', and 'listed price' columns to ensure they are numeric.

**Reasoning**:
Check the data types of the specified columns to confirm they are numeric after cleaning.
"""

print(df[['number_of_reviews', 'current/discounted_price', 'listed_price']].dtypes)

"""## Handle missing values

### Subtask:
Decide on a strategy for handling missing values in the 'number of reviews', 'current/discounted price', and 'listed price' columns (e.g., imputation, dropping rows).

**Reasoning**:
Calculate and print the number of missing values for the specified columns to inform the strategy for handling them.
"""

print(df[['number_of_reviews', 'current/discounted_price', 'listed_price']].isnull().sum())

"""**Reasoning**:
Based on the number of missing values, impute the missing values in 'number_of_reviews', 'current/discounted_price', and 'listed_price' columns with the median, as there are a considerable number of missing values in the price columns.


"""

for col in ['number_of_reviews', 'current/discounted_price', 'listed_price']:
    df[col].fillna(df[col].median(), inplace=True)

print(df[['number_of_reviews', 'current/discounted_price', 'listed_price']].isnull().sum())

"""**Reasoning**:
Verify that there are no remaining missing values in the specified columns after applying the imputation strategy.


"""

print(df[['number_of_reviews', 'current/discounted_price', 'listed_price']].isnull().sum())

"""## Summary:

### Data Analysis Key Findings

*   The 'number of reviews' column was successfully cleaned by removing commas and '+' signs and converted to a `float64` data type. Missing values represented as "nan" strings were converted to `NaN`.
*   The 'current/discounted price' and 'listed price' columns were cleaned by removing '\$' and commas and converted to a `float64` data type.
*   The data types of 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price' were successfully verified to be numeric (`float64`).
*   There were 15 missing values in 'number\_of\_reviews', 2068 missing values in 'current/discounted\_price', and 5734 missing values in 'listed\_price' before handling.
*   Missing values in 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price' were imputed using the median of each respective column.
*   After imputation, there were no remaining missing values in the specified columns.

### Insights or Next Steps

*   Consider exploring the distribution of the imputed price columns to ensure the median imputation did not significantly distort the data.
*   Investigate the reasons for the high number of missing values in the price columns to potentially improve future data collection processes.

"""

#categorical variable
categorical = [var for var in df.columns if df[var].dtype == 'O']
print('There are {} categorical variables'.format(len(categorical)))
Numerical = [var for var in df.columns if df[var].dtype != 'O']
print('There are {} numerical variables'.format(len(Numerical)))

categorical = [var for var in df.columns if df[var].dtype == 'O']
print('Categorical variables:', categorical)
numerical = [var for var in df.columns if df[var].dtype != 'O']
print('Numerical variables:', numerical)

# Visualize the distribution of numerical variables
numerical_cols = ['rating', 'number_of_reviews', 'current/discounted_price', 'listed_price']

for col in numerical_cols:
    plt.figure(figsize=(8, 5))
    sns.histplot(df[col].dropna(), kde=True)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

# Visualize the distribution of numerical variables by a categorical variable (e.g., 'is_best_seller')
numerical_cols = ['rating', 'number_of_reviews', 'current/discounted_price', 'listed_price']
categorical_col = 'is_best_seller'

for col in numerical_cols:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=categorical_col, y=col, data=df)
    plt.title(f'Distribution of {col} by {categorical_col}')
    plt.xlabel(categorical_col)
    plt.ylabel(col)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

"""Generated box plots showing the distribution of numerical variables like 'rating', 'number_of_reviews', 'current/discounted_price', and 'listed_price' across different categories in the 'is_best_seller' column.

Here's how to interpret these box plots:

The Box: The box itself represents the interquartile range (IQR), which is the middle 50% of the data. The bottom edge of the box is the first quartile (Q1), and the top edge is the third quartile (Q3).
The Line Inside the Box: The line inside the box is the median (Q2) of the data.
The Whiskers: The lines extending from the top and bottom of the box are called whiskers. They typically extend to 1.5 times the IQR from the edges of the box. They show the range of the data, excluding outliers.
Outliers: Points that fall outside the whiskers are considered outliers and are plotted individually as dots.
By looking at these box plots, you can compare:

Median values: How the typical value of the numerical variable differs between categories.
Spread of data: How spread out the data is within each category (represented by the length of the box and whiskers).
Presence of outliers: Whether there are extreme values in any of the categories.
For example, in the 'Distribution of rating by is_best_seller' plot, you can see how the median rating and the spread of ratings vary for products with 'No Badge', 'Best Seller', 'Amazon's', and 'Limited time deal' badges.*
"""

# Bivariate Analysis: Numerical vs Numerical - Correlation Heatmap
numerical_cols = ['rating', 'number_of_reviews', 'current/discounted_price', 'listed_price']

# Clean the 'rating' column by extracting the numerical part
df['rating'] = df['rating'].astype(str).str.extract('(\d+\.?\d*)').astype(float)

correlation_matrix = df[numerical_cols].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numerical Variables')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x='listed_price', y='current/discounted_price', data=df)
plt.title('Scatter Plot of Current/Discounted Price vs. Listed Price')
plt.xlabel('Listed Price')
plt.ylabel('Current/Discounted Price')
plt.show()

# Bivariate Analysis: title vs current/discounted_price (Analyzing average price for top titles)

# Get the top 10 most frequent titles
top_titles = df['title'].value_counts().nlargest(10).index

# Filter the dataframe to include only the top titles
df_top_titles = df[df['title'].isin(top_titles)]

# Calculate the average current/discounted price for each of the top titles
average_price_by_title = df_top_titles.groupby('title')['current/discounted_price'].mean().sort_values(ascending=False)

print("Average Current/Discounted Price for Top 10 Titles:")
print(average_price_by_title)

# Bivariate Analysis: Numerical vs Categorical - Plotting is_best_seller vs rating

plt.figure(figsize=(10, 6))
sns.boxplot(x='is_best_seller', y='rating', data=df)
plt.title('Distribution of Rating by Is_Best_Seller')
plt.xlabel('Is Best Seller')
plt.ylabel('Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Bivariate Analysis: Numerical vs Categorical - Plotting buy_box_availability vs current/discounted_price

plt.figure(figsize=(8, 6))
sns.boxplot(x='buy_box_availability', y='current/discounted_price', data=df)
plt.title('Distribution of Current/Discounted Price by Buy Box Availability')
plt.xlabel('Buy Box Availability')
plt.ylabel('Current/Discounted Price')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Bivariate Analysis: Categorical vs Categorical - Crosstab and Heatmap

# Choose two categorical columns for analysis (example: 'is_best_seller' and 'is_couponed')
categorical_col1 = 'is_best_seller'
categorical_col2 = 'is_couponed'

# Create a crosstab
crosstab_result = pd.crosstab(df[categorical_col1], df[categorical_col2])

print(f"Crosstab of {categorical_col1} and {categorical_col2}:")
print(crosstab_result)

# Visualize the crosstab with a heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(crosstab_result, annot=True, fmt='d', cmap='Blues')
plt.title(f'Relationship between {categorical_col1} and {categorical_col2}')
plt.xlabel(categorical_col2)
plt.ylabel(categorical_col1)
plt.show()

# Multivariate Analysis: Numerical vs Numerical with Categorical (Example: current/discounted_price vs listed_price with is_best_seller)

plt.figure(figsize=(10, 6))
sns.scatterplot(x='listed_price', y='current/discounted_price', hue='is_best_seller', data=df)
plt.title('Current/Discounted Price vs. Listed Price by Best Seller Status')
plt.xlabel('Listed Price')
plt.ylabel('Current/Discounted Price')
plt.show()

"""
This scatter plot titled 'Current/Discounted Price vs. Listed Price by Best Seller Status' helps us understand the relationship between the original listed price and the current or discounted price of products, and how this relationship varies depending on whether a product is labeled as a "Best Seller", "Amazon's Choice", has a "Limited time deal", or has "No Badge".

Here's what you can observe from the plot:

**General Relationship:** You can see a general trend where as the listed price increases, the current/discounted price also tends to increase. This is expected, as more expensive items typically have higher discounted prices as well.

**Best Seller (Orange Points):** The orange points represent products marked as "Best Seller". You can see where these points fall in relation to the overall trend. This might indicate if best-selling products are generally priced higher or lower, or if their discounts follow a different pattern.

**Amazon's (Green Points):** The green points represent "Amazon's Choice" products. Similar to best sellers, you can observe their distribution on the plot to see if there's a distinct pricing characteristic for these items.

**Limited time deal (Red Points):** The red points indicate products with a "Limited time deal". These might show a greater difference between the listed price and the current/discounted price, suggesting larger discounts.

**No Badge (Blue Points):** The blue points are products without any special badge. They represent the majority of the data and show the general pricing relationship.
By examining the spread and position of the points for each color (category), you can gain insights such as:

Are "Best Seller" products generally more expensive than those with "No Badge"?
Do products with "Limited time deal" consistently have lower current/discounted prices compared to their listed prices?
Are there any outliers within each category, indicating products with unusually high or low prices relative to their listed price?
This plot is useful for understanding pricing strategies and how different product labels might correlate with pricing patterns."""



"""# Amazon Electronics Products Sales Data Analysis Report

## Introduction

This report summarizes the exploratory data analysis performed on the Amazon Electronics Products Sales Dataset (uncleaned version). The dataset contains information on over 42,000 Amazon electronics products with 17 features, including sales, ratings, pricing, and product attributes. The objective of this analysis is to understand the characteristics of the data, identify potential issues, clean and prepare the data for further analysis, and explore relationships between key variables.

## Data Cleaning and Preparation

The following steps were taken to clean and prepare the data:

1.  **Loading Data:** The uncleaned dataset (`amazon_products_sales_data_uncleaned.csv`) was loaded into a pandas DataFrame.
2.  **Initial Inspection:** The shape, data types, and summary statistics of the DataFrame were examined. It was noted that several columns were of object type and contained non-numeric characters, and there were missing values in multiple columns.
3.  **Cleaning 'number\_of\_reviews':** The 'number\_of\_reviews' column was cleaned by removing commas and '+' signs and converting it to a numeric data type (`float64`). Missing values were handled during this conversion by coercing errors to `NaN`.
4.  **Handling Missing Values after cleaning 'number\_of\_reviews':** Rows with missing values were dropped using `dropna`. This resulted in a significant reduction in the number of rows (from 12837 to 796).
5.  **Identifying Variable Types:** Categorical and numerical variables were identified based on their data types after the initial cleaning. There were 15 categorical variables and 1 numerical variable at this stage.
6.  **Cleaning Price Columns:** The 'current/discounted\_price' and 'listed\_price' columns were cleaned by removing '$' and commas and converting them to a numeric data type (`float64`). Missing values were coerced to `NaN`.
7.  **Verifying Data Types:** The data types of 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price' were confirmed to be numeric (`float64`).
8.  **Handling Missing Values in Price Columns:** The number of missing values in the numerical columns was checked again. It was observed that 'listed\_price' had a considerable number of missing values (514 rows in the remaining 796). Missing values in 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price' were imputed using the median of each respective column.
9.  **Final Missing Value Check:** A final check confirmed that there were no remaining missing values in the analyzed columns.
10. **Re-identifying Variable Types:** After cleaning and imputation, the variable types were re-identified, resulting in 13 categorical variables and 3 numerical variables.

## Exploratory Data Analysis (EDA)

### Univariate Analysis (Distribution of Numerical Variables)

Histograms and kernel density estimates were used to visualize the distribution of the numerical variables: 'rating', 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price'.

*   **Rating:** The distribution of ratings showed a concentration of products with high ratings (4.5 and above).
*   **Number of Reviews:** The distribution of the number of reviews was heavily skewed to the right, indicating that most products have a relatively small number of reviews, while a few have a very large number.
*   **Current/Discounted Price and Listed Price:** Both price distributions were also skewed to the right, with a majority of products priced lower and fewer products at higher price points.

### Bivariate Analysis

*   **Numerical vs. Numerical (Correlation Heatmap):** A correlation heatmap was generated to examine the relationships between 'rating', 'number\_of\_reviews', 'current/discounted\_price', and 'listed\_price'.
    *   There was a weak positive correlation between 'rating' and 'number\_of\_reviews' (0.08).
    *   There was a moderate positive correlation between 'current/discounted\_price' and 'listed\_price' (0.55), as expected.
    *   'Rating' showed a weak negative correlation with both price columns (-0.33 with 'current/discounted\_price' and -0.29 with 'listed\_price').
    *   'Number of reviews' also showed a weak negative correlation with both price columns (-0.15 with 'current/discounted\_price' and -0.09 with 'listed\_price').

*   **Numerical vs. Categorical (Box Plots):** Box plots were used to visualize the distribution of numerical variables across different categories of categorical variables like 'is\_best\_seller' and 'buy\_box\_availability'.
    *   **Rating by Is\_Best\_Seller:** The box plot showed that products with different "best seller" statuses generally have high ratings, with some variation in the median and spread across categories. "Best Seller" products had a slightly higher median rating compared to those with "No Badge".
    *   **Number of Reviews by Is\_Best\_Seller:** Products marked as "Best Seller" tend to have a higher number of reviews compared to other categories.
    *   **Current/Discounted Price by Buy Box Availability:** Products with "Add to cart" availability showed a wider range of current/discounted prices and several outliers with high prices.

*   **Categorical vs. Categorical (Crosstab and Heatmap):** A crosstab and heatmap were generated to explore the relationship between 'is\_best\_seller' and 'is\_couponed'.
    *   The heatmap showed the counts of products for each combination of "best seller" status and coupon availability. The majority of products had "No Badge" and "No Coupon". There were relatively few products with "Best Seller" or "Amazon's Choice" badges that also had coupons.

### Multivariate Analysis

*   **Numerical vs. Numerical with Categorical (Scatter Plot):** A scatter plot of 'current/discounted\_price' vs. 'listed\_price' was generated, with points colored by 'is\_best\_seller' status.
    *   This plot reinforced the positive relationship between listed price and current/discounted price. It also allowed for visual inspection of how this relationship varies across different "best seller" categories, highlighting potential differences in pricing strategies or discount levels for each group.

## Conclusion

The data cleaning process successfully handled missing values and converted relevant columns to appropriate data types. The exploratory data analysis revealed insights into the distributions of key variables, the relationships between numerical features, and how categorical attributes like "best seller" status and coupon availability relate to pricing and reviews.

## Next Steps

Based on this analysis, potential next steps include:

*   Further investigation into the outliers identified in the price and number of reviews distributions.
*   More in-depth analysis of specific product categories.
*   Exploring other categorical variables and their relationships with numerical features.
*   Developing predictive models for price or sales based on the cleaned and explored data.
"""

df.to_csv('amazon_products_sales_data_cleaned.csv', index=False)
print("Cleaned data saved to 'amazon_products_sales_data_cleaned.csv'")

import sys
print(f"Python version: {sys.version}")